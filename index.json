[{"categories":["飲食"],"contents":"5道養生素食食譜 1. 素食椰奶咖哩蔬菜湯 食材及數量 椰奶：1 碗 蔬菜高湯：2 杯 紅蘿蔔（切丁）：1 個 馬鈴薯（切丁）：1 個 洋蔥（切丁）：1 個 青豆：1 杯 椰子奶：1 杯 綠咖哩醬：2 湯匙 鹽和胡椒粉：依個人口味 做法 在中火鍋中，加入椰奶和蔬菜高湯，攪拌均勻直到混合物煮沸。\n加入紅蘿蔔、馬鈴薯和洋蔥，繼續煮至蔬菜變軟。\n加入青豆、椰奶和綠咖哩醬，攪拌均勻，繼續煮約5分鐘。\n根據個人口味加入鹽和胡椒粉調味。\n關火，盛裝起來，可加點新鮮香草或椰子片作裝飾。\n2. 素食鮮蔬炒麵 食材及數量 麵條：2 杯（煮熟） 綠豆芽：1 杯 胡蘿蔔絲：1 杯 洋蔥絲：1 杯 彩椒（切絲）：1 杯 輕醬油：2 湯匙 糖：1 湯匙 米酒：1 湯匙 蒜蓉：1 茶匙 薑蓉：1 茶匙 做法 煮熟麵條備用。\n在熱鍋中加入輕醬油、糖和米酒炒香。\n加入洋蔥絲、胡蘿蔔絲和彩椒快速翻炒。\n加入綠豆芽、蒜蓉和薑蓉炒勻。\n最後加入煮熟的麵條，快速翻炒均勻即可。\n3. 素食意大利麵沙拉 食材及數量 意大利麵：2 杯（煮熟） 櫻桃番茄（切半）：1 杯 青瓜（切片）：1 杯 甜椒（切絲）：1 杯 黑橄欖（去核切片）：1/2 杯 新鮮羅勒葉：1/4 杯 橄欖油：2 湯匙 紅酒醋：1 湯匙 鹽和黑胡椒粉：依個人口味 做法 煮熟意大利麵並瀝乾水分。\n將櫻桃番茄、青瓜、甜椒和黑橄欖切片備用。\n在大碗中拌勻橄欖油、紅酒醋、鹽和黑胡椒粉。\n加入煮熟的意大利麵和切好的蔬菜，拌勻。\n最後灑上新鮮羅勒葉作為裝飾即可享用。\n4. 素食黑豆墨西哥燴飯 食材及數量 煮熟的白米飯：1 杯 黑豆（瀝乾）：1 杯 玉米粒（罐頭或冷凍）：1/2 杯 切碎的番茄：1 杯 切碎的生菜：1 杯 切碎的紅洋蔥：1/4 杯 新鮮莫札瑞拉奶酪：1/4 杯 莫札瑞拉奶酪：2 湯匙 番茄醬：1/4 杯 橄欖油：1 湯匙 辣椒粉：1 茶匙 鹽和黑胡椒粉：依個人口味 做法 煮熟白米飯並備用。\n在鍋中加入橄欖油和辣椒粉炒香。\n加入切碎的番茄、黑豆和玉米粒炒熟。\n拌入煮熟的白米飯，加入番茄醬和調味料。\n最後撒上切碎的生菜和莫札瑞拉奶酪即可。\n5. 素食南瓜椰奶咖哩 食材及數量 南瓜：1 個 椰奶：1 碗 紅蘿蔔：1 個 洋蔥：1 個 青豆：1 杯 綠咖哩醬：2 湯匙 鹽和胡椒粉：依個人口味 做法 將南瓜、紅蘿蔔和洋蔥切丁備用。\n在中火鍋中加入椰奶和水攪拌均勻直到混合物煮沸。\n加入切丁的蔬菜，繼續煮至蔬菜變軟。\n加入青豆、綠咖哩醬，攪拌均勻，繼續煮約5分鐘。\n根據個人口味加入鹽和胡椒粉調味。\n關火，盛裝起來，可加點新鮮香草作裝飾。\n這5道素食食譜簡單易做，營養豐富，非常適合追求健康的生活方式。希望你喜歡\n","permalink":"https://puzu001.github.io/blog/dish03/","tags":["健康"],"title":"5道養生素食料理食譜"},{"categories":["開發","學習"],"contents":"CSS 語法架構 介紹 CSS（Cascading Style Sheets）是用於描述網頁內容外觀和布局的樣式表語言。本教學將介紹 CSS 的基本語法和常用樣式屬性。\n基本 CSS 語法 選擇器 CSS 使用選擇器來選擇要樣式化的 HTML 元素。以下是幾種常見的選擇器：\n元素選擇器：選擇指定類型的 HTML 元素。\np { color: blue; } 類選擇器：選擇帶有指定類名的元素。\n.button { background-color: #3498db; color: #fff; padding: 10px 20px; border: none; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; } ID 選擇器：選擇具有指定 ID 的單個元素。\n#header { background-color: #333; color: #fff; padding: 10px; text-align: center; } 屬性和值 CSS 屬性用於定義元素的外觀，值則指定這些屬性的具體內容。以下是一些常見的 CSS 屬性和值的示例：\nbody { font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 0; } h1 { color: #333; font-size: 24px; text-align: center; margin-bottom: 20px; } .container { width: 80%; margin: 0 auto; padding: 20px; background-color: #fff; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); } 層級和繼承 CSS 具有層級和繼承的特性，這使得樣式可以根據 HTML 元素的層級結構和繼承關係進行應用。\n.parent { color: blue; } .child { font-weight: bold; } \u0026lt;div class=\u0026#34;parent\u0026#34;\u0026gt; Parent Element \u0026lt;div class=\u0026#34;child\u0026#34;\u0026gt;Child Element\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 在上面的例子中，.child 元素將繼承 .parent 元素的文字顏色（blue），並且自身添加粗體（bold）樣式。\n註釋 使用 /* */ 來添加註釋，註釋可以幫助你解釋代碼的作用和細節。\n/* 這是一個註釋示例 */ p { margin-bottom: 10px; /* 添加段落的底部邊距 */ } CSS 盒模型 CSS 盒模型描述了 HTML 元素如何生成並佔用空間，它包括內容、填充、邊框和邊距。\n.box { width: 200px; height: 200px; padding: 20px; border: 1px solid #ccc; margin: 10px; background-color: #f0f0f0; } 結論 這篇教學介紹了 CSS 的基本語法結構和一些常用的樣式屬性。學習好 CSS 可以幫助你創建精美且具有吸引力的網頁設計。\n希望這篇教學對你有所幫助！\n如需更多信息，請參考 W3Schools CSS 教程。\n這個 Markdown 文件提供了一個基本的 CSS 教學，涵蓋了 CSS 的選擇器、屬性和值、層級和繼承、註釋、盒模型等基本語法結構。你可以根據需要調整內容，以滿足特定的教學需求或目標。 ","permalink":"https://puzu001.github.io/blog/test11/","tags":["Hugo","學習"],"title":"css 語法架構學習"},{"categories":["開發","學習"],"contents":"HTML 語法架構 介紹 HTML（HyperText Markup Language）是用於創建網頁的基本構建塊。本教學將介紹 HTML 的基本結構和常用標籤。\nHTML 基本結構 一個基本的 HTML 文件由以下部分組成：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- 在這裡添加你的內容 --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;!DOCTYPE html\u0026gt;：定義文件類型和版本。 \u0026lt;html\u0026gt;：根元素，包含整個 HTML 內容。 \u0026lt;head\u0026gt;：包含了文檔的元（meta）數據、鏈接到外部資源（如樣式表和腳本）和其他的元素。 \u0026lt;meta\u0026gt;：提供關於文檔的元數據，如字符集設置和頁面的元描述。 \u0026lt;title\u0026gt;：文檔的標題，顯示在瀏覽器的標題欄或標籤中。 \u0026lt;body\u0026gt;：包含了可見的頁面內容，如文本、圖像、超鏈接、表格等。 HTML 常用標籤 標題標籤 HTML 提供了六個級別的標題標籤，從 \u0026lt;h1\u0026gt; 到 \u0026lt;h6\u0026gt;，用於定義不同級別的標題。\n\u0026lt;h1\u0026gt;這是一個一級標題\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;這是一個二級標題\u0026lt;/h2\u0026gt; \u0026lt;!-- 依此類推，直到 \u0026lt;h6\u0026gt; --\u0026gt; 段落標籤 用 \u0026lt;p\u0026gt; 標籤來定義段落：\n\u0026lt;p\u0026gt;這是一個段落。\u0026lt;/p\u0026gt; 超鏈接標籤 用 \u0026lt;a\u0026gt; 標籤來創建超鏈接：\n\u0026lt;a href=\u0026#34;https://example.com\u0026#34;\u0026gt;點擊這裡訪問示例網站\u0026lt;/a\u0026gt; 圖像標籤 用 \u0026lt;img\u0026gt; 標籤插入圖像：\n\u0026lt;img src=\u0026#34;image.jpg\u0026#34; alt=\u0026#34;描述圖像的文字\u0026#34;\u0026gt; 列表標籤 HTML 支持有序列表（\u0026lt;ol\u0026gt;）和無序列表（\u0026lt;ul\u0026gt;）：\n\u0026lt;h3\u0026gt;有序列表：\u0026lt;/h3\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;項目一\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;項目二\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;h3\u0026gt;無序列表：\u0026lt;/h3\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;項目一\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;項目二\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; HTML 屬性 HTML 標籤可以包含屬性，用於提供進一步的信息或設置。例如，href 屬性指定超鏈接的目標 URL。\n\u0026lt;a href=\u0026#34;https://example.com\u0026#34; title=\u0026#34;點擊訪問示例網站\u0026#34;\u0026gt;點擊這裡訪問示例網站\u0026lt;/a\u0026gt; 結論 這篇教學介紹了 HTML 的基本結構、常用標籤和屬性，幫助你快速入門創建靜態網頁。HTML 是學習網頁開發的第一步，通過不斷練習和深入理解，你可以創建出豐富多彩的網頁內容。\n希望這篇教學對你有所幫助！\n如需更多信息，請參考 W3Schools HTML 教程。\n這個 Markdown 文件提供了一個基本的 HTML 教學，涵蓋了 HTML 文件的結構、常見標籤的使用方法以及基本的屬性設置。你可以根據需要調整內容，以滿足特定的教學需求或目標。 ","permalink":"https://puzu001.github.io/blog/test09/","tags":["Hugo","靜態網站生成器","學習"],"title":"Html 語法架構學習"},{"categories":["開發","學習"],"contents":"Hugo 語法架構教學 Hugo 是一個基於 Go 語言的靜態網站生成器，非常適合用來建立快速且高效的網站。在這篇文章中， 我們將介紹 Hugo 的基本語法架構，包括配置文件、內容文件、模板文件、短代碼以及靜態資源的使用。\n配置文件 (config.toml / config.yaml / config.json) 配置文件用於設置網站的全局配置，例如網站標題、基礎 URL、語言等。以下是一些常見的配置項目：\nconfig.toml baseURL = \u0026#34;https://example.com/\u0026#34; title = \u0026#34;My Hugo Site\u0026#34; languageCode = \u0026#34;en-us\u0026#34; theme = \u0026#34;your-theme-name\u0026#34; [params] author = \u0026#34;Your Name\u0026#34; description = \u0026#34;A brief description of the site.\u0026#34; config.yaml baseURL: \u0026#34;https://example.com/\u0026#34; title: \u0026#34;My Hugo Site\u0026#34; languageCode: \u0026#34;en-us\u0026#34; theme: \u0026#34;your-theme-name\u0026#34; params: author: \u0026#34;Your Name\u0026#34; description: \u0026#34;A brief description of the site.\u0026#34; config.json { \u0026#34;baseURL\u0026#34;: \u0026#34;https://example.com/\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;My Hugo Site\u0026#34;, \u0026#34;languageCode\u0026#34;: \u0026#34;en-us\u0026#34;, \u0026#34;theme\u0026#34;: \u0026#34;your-theme-name\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;author\u0026#34;: \u0026#34;Your Name\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;A brief description of the site.\u0026#34; } } 內容文件 (content/) 內容文件夾中存儲網站的所有內容，每個內容文件通常以 Markdown 文件形式存儲，並包含前端語法（front matter）。\n文章範例 (content/posts/my-first-post.md) --- title: \u0026#34;My First Post\u0026#34; date: 2024-07-20T12:00:00Z draft: true tags: [\u0026#34;tag1\u0026#34;, \u0026#34;tag2\u0026#34;] categories: [\u0026#34;category1\u0026#34;] --- 這是我的第一篇文章內容。 模板文件 (layouts/) 模板文件定義了如何渲染內容，包括頁面模板、部分模板、短代碼等。以下是一些常見的模板文件及其用途：\nlayouts/_default/baseof.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {{ block \u0026#34;main\u0026#34; . }}{{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; layouts/_default/single.html {{ define \u0026#34;main\u0026#34; }} \u0026lt;article\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ .Content }}\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; {{ end }} layouts/_default/list.html {{ define \u0026#34;main\u0026#34; }} \u0026lt;ul\u0026gt; {{ range .Pages }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} layouts/partials/header.html \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;{{ .Site.Title }}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ .Site.Params.description }}\u0026lt;/p\u0026gt; \u0026lt;/header\u0026gt; 短代碼 (layouts/shortcodes/) 短代碼用於在內容文件中插入自定義元素，使用簡單且靈活。\n自定義短代碼範例 (layouts/shortcodes/myshortcode.html) \u0026lt;p\u0026gt;This is my custom shortcode with parameter: {{ .Get \u0026#34;param\u0026#34; }}\u0026lt;/p\u0026gt; 使用範例 在內容文件中使用短代碼：\n靜態資源 (static/) 靜態資源文件夾中的文件會被原樣複製到網站的根目錄，用於存放圖片、CSS 文件、JavaScript 文件等。\n靜態文件範例 static/\r└── images/\r└── my-image.jpg 引用靜態資源：\n\u0026lt;img src=\u0026#34;/images/my-image.jpg\u0026#34; alt=\u0026#34;My Image\u0026#34;\u0026gt; 進階功能 內容組織（Sections） Hugo 支持多層次的內容組織，通過文件夾來區分不同的內容部分。\n範例 content/\r├── posts/\r│ ├── post1.md\r│ └── post2.md\r├── projects/\r│ ├── project1.md\r│ └── project2.md 多語言支持 Hugo 支持多語言網站，可以在配置文件中設置不同語言的配置。\n範例 [languages] [languages.en] title = \u0026#34;My Hugo Site\u0026#34; weight = 1 [languages.fr] title = \u0026#34;Mon Site Hugo\u0026#34; weight = 2 部署網站 將 Hugo 生成的靜態文件部署到網頁伺服器上，可以使用 GitHub Pages、Netlify 等平台。生成靜態文件：\nhugo 將 public/ 文件夾中的內容上傳到伺服器即可。\n總結 Hugo 的語法架構涵蓋了配置文件、內容文件、模板文件、短代碼以及靜態資源的使用。這些組成部分協同工作， 使得 Hugo 能夠快速生成靜態網站，並提供靈活的自定義選項以滿足不同需求。希望這篇教學能夠幫助你更好地 掌握 Hugo，建立屬於你自己的靜態網站。\n感謝閱讀這篇 \u0026ldquo;Hugo 語法架構教學\u0026rdquo; 部落格文章！如果你有任何問題或需要進一步的幫助，歡迎在下方留言。\n","permalink":"https://puzu001.github.io/blog/test03/","tags":["Hugo","靜態網站生成器","學習"],"title":"Hugo 語法架構教學"},{"categories":["開發","學習"],"contents":"Markdown 語法架構 介紹 Markdown 是一種輕量級標記語言，設計用來快速編寫格式化文檔，特別是用於網絡。本教學將介紹 Markdown 的基本語法和常用標記。\n基本文本格式 段落和換行 使用空行來分隔段落。換行需在行尾添加兩個空格以上。\n這是第一個段落。 這是第二個段落， 這是換行的示例。 標題 Markdown 支持六種級別的標題，使用 # 號加上空格表示標題級別，# 越多，標題級別越低。\n# 標題 1 ## 標題 2 ### 標題 3 #### 標題 4 ##### 標題 5 ###### 標題 6 強調和粗體 使用 * 或 _ 包圍文本來進行強調和粗體。\n*斜體* 或 _斜體_ **粗體** 或 __粗體__ ***斜體加粗*** 或 ___斜體加粗___ 列表 Markdown 支持有序列表和無序列表。\n無序列表 使用 *、+ 或 - 加上空格來創建無序列表。\n- 項目 1 - 項目 2 * 子項目 2.1 * 子項目 2.2 有序列表 使用數字加上點和空格來創建有序列表。\n1. 項目 1 2. 項目 2 1. 子項目 2.1 2. 子項目 2.2 鏈接 使用 [顯示文本](URL) 來創建鏈接。\n[點擊這裡訪問示例網站](https://example.com) 圖片 使用 ![替代文本](圖片URL) 來插入圖片。\n![示例圖片](https://example.com/image.jpg) 區塊引用 使用 \u0026gt; 來表示區塊引用。\n\u0026gt; 這是一個區塊引用示例。 代碼區塊 使用三個反引號 ``` 包圍代碼區塊，可以指定語言來進行語法高亮。\n```javascript function greet() { console.log(\u0026lsquo;Hello, Markdown!\u0026rsquo;); } ```\n表格 使用 | 分隔列，並使用 - 表示表頭和分隔行。\n| 姓名 | 年齡 | |------|------| | 小明 | 20 | | 小紅 | 25 | 結論 這篇教學介紹了 Markdown 的基本語法結構和常用標記，幫助你快速入門撰寫格式化文檔。Markdown 簡潔明了的語法使得寫作和編輯變得更加輕鬆和高效。\n希望這篇教學對你有所幫助！\n如需更多信息，請參考 Mastering Markdown 和 Markdown Guide。\n這個 Markdown 文件提供了一個基本的 Markdown 教學，涵蓋了段落、標題、強調、列表、鏈接、圖片、區塊引用、代碼區塊、表格等常見的 Markdown 語法結構。你可以根據需要調整內容，以滿足特定的教學需求或目標。 ","permalink":"https://puzu001.github.io/blog/test12/","tags":["Hugo","學習"],"title":"MarkDown 語法架構學習"},{"categories":["開發","學習"],"contents":"SCSS 語法架構 介紹 SCSS（Sassy CSS）是 CSS 的一種擴展，它提供了許多有用的功能，如變量、巢狀規則、混入（Mixins）等，並且具有更清晰和模組化的代碼結構。\n安裝 SCSS 要使用 SCSS，你需要先安裝 Sass，它是一個用於編譯 SCSS 到普通 CSS 的工具。\n安裝 Sass 可以使用 npm 在命令行中安裝 Sass：\nnpm install -g sass 安裝完成後，你可以使用以下命令來編譯 SCSS 文件：\nsass input.scss output.css 基本 SCSS 語法 變量 使用 $ 符號定義變量：\n$primary-color: #3498db; body { background-color: $primary-color; } 巢狀規則 可以將子選擇器和後代選擇器寫在一起：\n.navbar { background-color: #333; ul { list-style-type: none; li { display: inline-block; margin-right: 10px; a { text-decoration: none; color: #fff; } } } } 混入（Mixins） 混入允許你重用 CSS 屬性：\n@mixin border-radius($radius) { -webkit-border-radius: $radius; -moz-border-radius: $radius; -ms-border-radius: $radius; border-radius: $radius; } .box { @include border-radius(10px); background-color: #f0f0f0; padding: 20px; } 繼承（Extend） 使用 @extend 可以讓一個選擇器繼承另一個選擇器的所有樣式：\n.btn { padding: 10px; background-color: #3498db; color: #fff; } .btn-primary { @extend .btn; background-color: #e74c3c; } 運算符 支持數學運算符：\n.container { width: 100% / 3; } 結論 這篇教學介紹了 SCSS 的基本語法結構，包括變量、巢狀規則、混入、繼承和運算符等功能。SCSS 通過這些功能使得 CSS 更加強大和可維護，尤其適合大型項目和需要高度重用性的場景。\n參考 Sass 官方文檔。\n","permalink":"https://puzu001.github.io/blog/test10/","tags":["Hugo","學習"],"title":"SCSS 語法架構學習"},{"categories":["運動"],"contents":"適合中高齡伸展運動教學 簡介 伸展運動是一種對中高齡人群非常適合的運動形式，它有助於保持關節靈活性、增強肌肉柔軟度，同時能促進血液循環和緩解壓力。在這篇文章中，我們將介紹一些適合中高齡人群的伸展運動，並提供教學指導，幫助他們在日常生活中享受這些好處。\n伸展運動的好處 伸展運動對中高齡人群有著多重好處：\n保持靈活性和平衡：隨著年齡增長，身體的靈活性會逐漸減弱，適當的伸展運動可以幫助保持關節和肌肉的靈活性，從而減少跌倒和其他意外的風險。\n減輕關節和肌肉緊張：坐立不安的生活方式可能導致關節和肌肉變得僵硬，伸展運動可以幫助緩解這些緊張感，使身體感到更加輕松。\n促進血液循環：通過伸展，可以促進血液循環，提高身體的氧氣和營養供應，有助於維持健康的心血管系統。\n改善姿勢和身體對稱：進行定期的伸展運動可以改善姿勢，幫助保持良好的身體平衡和對稱性。\n中高齡伸展運動示範 以下是幾個適合中高齡人群的伸展運動示範：\n頸部伸展 頸部左右轉動：\n坐直，保持身體穩定。 慢慢轉動頸部，使頭部向左轉至舒適範圍，保持5秒。 再慢慢轉向右側，保持5秒。 重複這個動作5次。 頸部前後傾：\n坐直，慢慢將頭部向前傾至舒適範圍，保持5秒。 然後慢慢向後仰至舒適範圍，保持5秒。 重複這個動作5次。 肩部和手臂伸展 肩部圈畫：\n坐或站直，放鬆雙臂。 慢慢將雙肩向前畫圈，然後再向後畫圈。 每個方向重複10次。 手臂伸展：\n將右手舉過頭頂，彎曲手肘，手掌向下放在背部。 左手從後方伸出，彎曲肘部，嘗試雙手握手。 維持15至30秒，然後重複在另一側。 腿部伸展 大腿後側伸展：\n站立，將一隻腳放在椅子或低桌上。 慢慢向前彎曲身體，直到感受到大腿後側的伸展。 保持15至30秒，然後換另一邊。 小腿伸展：\n站立，向前邁出一步，將後一腿膝蓋放低，保持後腿直。 慢慢向前彎曲前腿，直到感受到小腿的伸展。 保持15至30秒，然後換另一邊。 總結 伸展運動對於中高齡人群來說，是一種非常重要且有益的運動方式。通過定期的伸展，可以改善身體靈活性，減少肌肉和關節的疼痛，同時促進整體健康和幸福感。建議每天安排一些時間進行這些簡單而有效的伸展運動，有助於享受更健康、更積極的生活！\n希望這些伸展運動示範對您有所幫助，並且能夠在日常生活中輕鬆實踐。保持健康，享受生活！\n","permalink":"https://puzu001.github.io/blog/sports01/","tags":["健康"],"title":"中高齡伸展運動"},{"categories":["運動"],"contents":"適合中高齡有氧運動教學 簡介 有氧運動對中高齡人群來說是非常重要的，它有助於提高心肺功能、增強代謝活力，同時有助於控制體重和促進心理健康。在這篇文章中，我們將介紹一些適合中高齡人群的有氧運動，並提供教學指導，幫助他們在日常生活中享受這些好處。\n有氧運動的好處 有氧運動對中高齡人群有著多重好處：\n提高心肺功能：有氧運動可以增強心臟和肺部的功能，增加氧氣的運輸，有助於提高整體的身體耐力。\n促進代謝和消耗卡路里：通過有氧運動，可以增加身體的代謝率，有助於消耗多餘的卡路里，控制體重。\n改善心理健康：有氧運動有助於釋放內啡肽和多巴胺等神經遞質，能夠減輕壓力、焦慮和抑鬱情緒，提升整體的心理健康水平。\n增強骨骼健康：有氧運動還可以增強骨骼密度，減少骨質疏鬆的風險。\n中高齡有氧運動示範 以下是幾個適合中高齡人群的有氧運動示範：\n快步走 步行姿勢正確：\n站直，雙腳分開與肩同寬。 走路時保持身體挺直，手臂自然搖擺。 起初可以從每天走15分鐘開始，逐漸增加到30分鐘或更長時間。 快速步行：\n加快步伐，但仍保持舒適節奏。 注意呼吸，保持深呼吸並放鬆肌肉。 每周至少進行3次，每次持續至少20分鐘。 水中有氧運動 水中步行： 在游泳池或水深不超過肩膀的地方進行。 慢慢地以正常步伐在水中行走。 水的阻力有助於增強肌肉，同時減少關節的壓力。 每次持續20分鐘到30分鐘，每周2至3次。 室內單車運動 騎行訓練： 使用靜態單車或健身房的健身單車。 調整座椅高度，保持舒適的姿勢。 起初以較慢的速度騎行，逐漸增加到中等強度。 每次30分鐘到45分鐘，每周至少3次。 總結 有氧運動是中高齡人群保持健康和活力的重要途徑。通過定期進行這些簡單而有效的有氧運動，可以改善心肺功能、促進身體代謝，同時改善心理健康和整體幸福感。建議每周至少進行3次有氧運動，每次持續20分鐘以上，以獲得最佳效果。\n希望這些有氧運動示範對您有所幫助，並且能夠在日常生活中輕鬆實踐。保持健康，享受生活！\n","permalink":"https://puzu001.github.io/blog/sports02/","tags":["健康"],"title":"中高齡有氧運動"},{"categories":["運動"],"contents":"適合中高齡重訓運動教學 簡介 重訓運動對中高齡人群來說是非常重要的，它有助於增強肌肉力量、提高骨密度，同時還可以改善身體的平衡和姿勢。在這篇文章中，我們將介紹一些適合中高齡人群的重訓運動，並提供教學指導，幫助他們在日常生活中享受這些好處。\n重訓運動的好處 重訓運動對中高齡人群有著多重好處：\n增強肌肉力量：隨著年齡增長，肌肉力量會逐漸減弱，進行重訓運動可以有效增強肌肉力量，提高日常生活中的功能性能力。\n增加骨密度：重訓運動有助於促進骨骼健康，減少骨質疏鬆的風險。\n改善身體平衡和姿勢：進行重訓可以改善身體的平衡感和姿勢，減少跌倒和受傷的機會。\n促進新陳代謝：重訓運動可以促進新陳代謝，有助於控制體重並提高身體的代謝率。\n中高齡重訓運動示範 以下是幾個適合中高齡人群的重訓運動示範：\n腿部訓練 深蹲：\n站立，雙腳與肩同寬，腳尖稍微向外。 慢慢彎曲膝蓋，讓臀部向後坐，直到大腿平行於地面。 保持上半身挺直，然後慢慢站起來。 初學者可以使用椅子或牆壁作支撐，逐漸增加深度和重量。 站姿提腿：\n站立，雙手放在腰部或椅子後面以保持平衡。 慢慢提起一條腿，直到大腿與地面平行。 慢慢放下腿，切換至另一側。 每側重複10次。 上肢訓練 壁推：\n站立面對一面牆壁，雙手平放在牆上。 雙手推牆，使肩膀和背部肌肉收緊。 慢慢放鬆，重複10至15次。 椅子二頭肌伸展：\n坐在椅子上，雙手扶住椅背。 慢慢彎曲肘部，將身體向椅子靠近，然後推起身體。 重複10至15次。 核心訓練 平板支撐：\n仰臥在地板上，手臂彎曲，手掌放在肩膀下。 用手臂和腳尖支撐身體，保持身體成一直線。 持續15至30秒，逐漸增加持續時間。 桶狀舉腿：\n坐在椅子上，雙手握住椅子兩側。 抬起雙腿，直到與地面平行，然後慢慢放下。 重複15次。 總結 重訓運動對於中高齡人群來說是一種安全且有效的健身方式，可以幫助他們保持健康、增強肌肉和骨骼健康。建議每周進行至少2到3次的重訓運動，每次運動時間為30分鐘至1小時，並且逐漸增加重量和次數以達到最佳效果。\n希望這些重訓運動示範能對您有所幫助，並且能夠在日常生活中輕鬆實踐。保持健康，享受生活！\n","permalink":"https://puzu001.github.io/blog/sports03/","tags":["健康"],"title":"中高齡重訓運動"},{"categories":["旅遊"],"contents":"嘉義二日遊行程規劃 第一天：文化與美食探索 早餐：阿蘭草仔粿 開始你的嘉義之旅，不妨先品嚐當地著名的阿蘭草仔粿，這種傳統美食以香甜的粿皮包裹餡料而聞名。\n上午：嘉義市文化公園 漫步於嘉義市文化公園，這裡有著綠樹成蔭的步道和各種文化藝術展覽，是放鬆心情和欣賞當地文化的好地方。\n午餐：嘉義火雞肉飯 在市中心尋找一家嘉義火雞肉飯的餐廳，這道美食以嫩滑的火雞肉和香氣四溢的米飯組成，絕對是味蕾的享受。\n下午：嘉義孔廟 參觀嘉義孔廟，這座具有傳統建築風格的古老廟宇，是致敬孔子和中國儒家思想的場所。\n傍晚：文化夜市 嘉義有許多具有地方特色的夜市，例如文化路夜市或府前路夜市，這裡可以品嚐各種嘉義特色小吃和手工藝品。\n晚餐：鐵路便當 到鐵路站附近找一家鐵路便當店，這種便當以豐盛的菜色和獨特的包裝方式聞名，是台灣經典的夜市美食之一。\n第二天：自然與歷史之旅 早餐：嘉義早餐店 到當地的早餐店享用一份道地的嘉義早餐，例如肉粽、米粉湯或鹹豆漿等，開始充滿活力的一天。\n上午：阿里山森林遊樂區 前往阿里山，探索其豐富的自然生態和壯麗的山景。你可以搭乘小火車登頂，欣賞茶園和雲海景觀。\n午餐：阿里山美食 在阿里山上品嚐當地的美食，如阿里山竹筒飯、阿里山高山茶餐等，享受美食與大自然的結合。\n下午：嘉義文化創意產業園區 回到嘉義市區，參觀文化創意產業園區，這裡展示了嘉義的文化遺產和創新產業，是了解當地文化的好去處。\n傍晚：嘉義梅山夕陽 如果時間允許，可以前往梅山地區，欣賞嘉義梅山的美麗夕陽景色，這裡也是攝影愛好者的熱門拍攝地點。\n晚餐：嘉義小吃 在嘉義市區找一家小吃店，品嚐各種當地特色小吃，如米糕、魚丸湯、擔仔麵等，結束這段美好的嘉義之旅。\n結論 這份行程規劃帶你探索嘉義豐富的文化、美食和自然景觀，無論是喜歡歷史文化還是大自然的美好，都能在嘉義找到滿足和享受。\n希望這份二日遊行程對你的嘉義之旅有所幫助！\n如需更多信息，請參考 嘉義市政府旅遊網站。\n這個 Markdown 文件提供了一份完整的嘉義二日遊行程規劃，包括各個時段的推薦活動、美食和景點，讓遊客能夠充分體驗嘉義的文化、美食和自然之美。你可以根據需要調整內容，以滿足特定的遊客需求或旅行計劃。 ","permalink":"https://puzu001.github.io/blog/trip01/","tags":["休閒"],"title":"体閒旅遊"},{"categories":["開發","學習"],"contents":" Go 語法 Go 語言（簡稱 Golang）是一種靜態類型、編譯型的編程語言，由 Google 開發。它以其簡單、高效和並行處理能力而聞名。在這篇教學中，我們將介紹 Go 語言的基本語法，包括變量、數據類型、函數、條件語句、循環、結構體和並發處理。\n目錄 Hello, World! 變量和常量 數據類型 函數 條件語句 循環 結構體 並發處理 1. Hello, World! package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } 以上是 Go 的一個簡單範例，展示如何打印 \u0026ldquo;Hello, World!\u0026quot;。每個 Go 程序都從 main 包開始執行，fmt 包提供了格式化輸出的功能。\n2. 變量和常量 變量 Go 中的變量可以使用 var 關鍵字聲明：\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int = 10 var b = 20 c := 30 fmt.Println(a, b, c) } 常量 常量使用 const 關鍵字聲明：\npackage main import \u0026#34;fmt\u0026#34; const PI = 3.14 func main() { fmt.Println(PI) } 3. 數據類型 Go 支持多種數據類型，包括整數、浮點數、字符串和布爾值：\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int = 10 var b float64 = 3.14 var c string = \u0026#34;Hello\u0026#34; var d bool = true fmt.Println(a, b, c, d) } 4. 函數 Go 中的函數使用 func 關鍵字定義：\npackage main import \u0026#34;fmt\u0026#34; func add(x int, y int) int { return x + y } func main() { result := add(10, 20) fmt.Println(result) } 5. 條件語句 Go 中的條件語句包括 if、else if 和 else：\npackage main import \u0026#34;fmt\u0026#34; func main() { var a int = 10 if a \u0026lt; 20 { fmt.Println(\u0026#34;a 小於 20\u0026#34;) } else if a == 20 { fmt.Println(\u0026#34;a 等於 20\u0026#34;) } else { fmt.Println(\u0026#34;a 大於 20\u0026#34;) } } 6. 循環 Go 支持 for 循環：\npackage main import \u0026#34;fmt\u0026#34; func main() { for i := 0; i \u0026lt; 5; i++ { fmt.Println(i) } // 迭代數組 arr := [3]int{1, 2, 3} for index, value := range arr { fmt.Println(index, value) } } 7. 結構體 結構體是 Go 中的自定義數據類型：\npackage main import \u0026#34;fmt\u0026#34; type Person struct { Name string Age int } func main() { person := Person{Name: \u0026#34;Alice\u0026#34;, Age: 30} fmt.Println(person.Name, person.Age) } 8. 並發處理 Go 支持並發處理，使用 goroutine 和 channel：\nGoroutine package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func say(s string) { for i := 0; i \u0026lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { go say(\u0026#34;world\u0026#34;) say(\u0026#34;hello\u0026#34;) } Channel package main import \u0026#34;fmt\u0026#34; func sum(s []int, c chan int) { sum := 0 for _, v := range s { sum += v } c \u0026lt;- sum } func main() { s := []int{1, 2, 3, 4, 5} c := make(chan int) go sum(s, c) result := \u0026lt;-c fmt.Println(result) } 感謝閱讀這篇 \u0026ldquo;Go 語法教學\u0026rdquo; 部落格文章！如果你有任何問題或需要進一步的幫助，歡迎在下方留言。\n","permalink":"https://puzu001.github.io/blog/test04/","tags":["Hugo","學習"],"title":"Go 語法學習 "},{"categories":["學習"],"contents":"hello world\nI am CCW\nMarkdown 語法 內文 標題 粗體 斜體 有序序列 無序序列 引用 超連結 圖片 單行程式碼 多行程式碼 表格 內文\n一級標題 二級標題 三級標題 五級標題 hello world hello world haha 超連結 我的github\n內部連結\n圖片 單行程式碼 hello 多行程式碼 print (\u0026#34;hello world\u0026#34;) print (\u0026#34;hello world\u0026#34;) print (\u0026#34;hello world\u0026#34;) shortcodes - youtube twitter Owl bet you\u0026#39;ll lose this staring contest 🦉 pic.twitter.com/eJh4f2zncC\n\u0026mdash; San Diego Zoo Wildlife Alliance (@sandiegozoo) October 26, 2021 instagram View this post on Instagram ","permalink":"https://puzu001.github.io/blog/test01/","tags":["markdown","hugo","學習"],"title":"How to use markdown - test "}]